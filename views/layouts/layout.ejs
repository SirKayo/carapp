<!DOCTYPE html>
<html>
  <head>
    <title>Начало</title>
    <script src="/dependencies/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.35/js/uikit.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.35/js/uikit-icons.js"></script>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
      <!-- <a href="#offcanvas-slide" class="uk-icon-button uk-position-top-left uk-button-primary" uk-toggle uk-icon="icon: menu"></a> -->
        <nav class="uk-navbar-container uk-margin" uk-navbar>
            <div class="uk-navbar-left">
                <div class="uk-navbar-left">
                    <a class="uk-navbar-toggle" uk-navbar-toggle-icon href="#offcanvas-slide" uk-toggle></a>
                </div>
            </div>
        </nav>

      <div id="offcanvas-slide" uk-offcanvas>
          <div class="uk-offcanvas-bar">
              <button class="uk-offcanvas-close" type="button" uk-close></button>
              <ul class="uk-nav uk-nav-default uk-text-large">
                  <!-- <li class="uk-active"><a href="/client/add">Active</a></li>
                  <li><a href="#">Item</a></li>
                  <li class="uk-nav-header">Добави</li>
                  <li><a href="/client/add">Клиент</a></li>
                  <li><a href="/vehicles/add">Автомобил</a></li> -->
                  <li class="uk-nav-divider"></li>
                  <li><a href="/">Начало</a></li>
                  <li class="uk-nav-divider"></li>
                  <li class="uk-nav-header uk-text-large">Меню</li>
                  <li><a href="/client/list">Клиенти</a></li>
                  <li><a href="/vehicles/list">Автомобили</a></li>
                  <li><a href="/rent/list">Наеми</a></li>
                  <li><a href="/income/list">Приходи</a></li>
                  <li><a href="/expense/list">Разходи</a></li>
                  <li class="uk-nav-divider"></li>
                  <li><a href="/inquaries/list">Справка</a></li>
                  <li class="uk-nav-divider"></li>
                  <li><a href="/ViewerJS/ToU.pdf" target="_blank">Договор <span uk-icon="icon: pull"></span></a></li>
                  <li class="uk-nav-divider"></li>
              </ul>
      
          </div>
      </div>
    <%- body %>
    


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script type="text/javascript" src='/table/tableQuery.js'></script>
  </body>
</html>
